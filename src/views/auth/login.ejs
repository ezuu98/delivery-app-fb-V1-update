<section class="auth-panel">
  <h2 class="auth-title">Login</h2>
  <div id="auth-error" class="auth-error hidden"></div>
  <div id="auth-success" class="auth-success hidden"></div>
  <form id="loginForm" class="auth-form">
    <label class="auth-label">Email
      <input class="auth-input" id="email" type="email" autocomplete="email" required />
    </label>
    <label class="auth-label">Password
      <span class="password-field">
        <input class="auth-input" id="password" type="password" autocomplete="current-password" required />
        <button type="button" id="togglePwd" class="toggle-password" aria-label="Show password">Show</button>
      </span>
    </label>
    <div class="auth-actions">
      <label class="remember">
        <input type="checkbox" id="rememberMe" /> Remember me
      </label>
      <button class="link-button" id="forgotBtn" type="button">Forgot password?</button>
    </div>
    <button class="auth-button" id="submitBtn" type="submit">Sign in</button>
  </form>
  <p class="auth-alt">No account? <a href="/auth/register">Register</a></p>
</section>
<script type="module">
  const cfg = <%- JSON.stringify(firebaseConfig) %>;
  const errBox = document.getElementById('auth-error');
  const okBox = document.getElementById('auth-success');
  const submitBtn = document.getElementById('submitBtn');
  function showErr(msg){ errBox.textContent = msg; errBox.classList.remove('hidden'); }
  function showOk(msg){ okBox.textContent = msg; okBox.classList.remove('hidden'); }
  function clearMsgs(){ errBox.classList.add('hidden'); okBox.classList.add('hidden'); }
  if(!cfg || !cfg.apiKey){ showErr('Firebase not configured. Set env vars.'); }
  else {
    import('https://www.gstatic.com/firebasejs/10.12.5/firebase-app.js').then(({initializeApp})=>{
      return Promise.all([
        Promise.resolve(initializeApp(cfg)),
        import('https://www.gstatic.com/firebasejs/10.12.5/firebase-auth.js')
      ]);
    }).then(([app, authMod])=>{
      const { getAuth, setPersistence, browserLocalPersistence, browserSessionPersistence, signInWithEmailAndPassword, sendPasswordResetEmail } = authMod;
      const auth = getAuth();

      document.getElementById('togglePwd').addEventListener('click', ()=>{
        const i = document.getElementById('password');
        if(i.type === 'password'){ i.type='text'; togglePwd.textContent='Hide'; } else { i.type='password'; togglePwd.textContent='Show'; }
      });

      document.getElementById('forgotBtn').addEventListener('click', async ()=>{
        clearMsgs();
        const email = document.getElementById('email').value.trim();
        if(!email) return showErr('Enter your email first');
        try { await sendPasswordResetEmail(auth, email); showOk('Password reset email sent'); }
        catch(e){ showErr((e && (e.code || e.message)) || 'Could not send reset email'); }
      });

      document.getElementById('loginForm').addEventListener('submit', async (e)=>{
        e.preventDefault(); clearMsgs(); submitBtn.disabled = true;
        const email = document.getElementById('email').value.trim();
        const password = document.getElementById('password').value;
        const remember = document.getElementById('rememberMe').checked;
        try {
          await setPersistence(auth, remember ? browserLocalPersistence : browserSessionPersistence);
          const cred = await signInWithEmailAndPassword(auth, email, password);
          const idToken = await cred.user.getIdToken();
          const res = await fetch('/auth/session', { method:'POST', headers:{'Content-Type':'application/json'}, credentials:'include', body: JSON.stringify({ idToken }) });
          if (!res.ok) throw new Error('Session creation failed');
          window.location.href = '/dashboard';
        } catch (e) { showErr((e && (e.code || e.message)) || 'Login failed'); }
        finally { submitBtn.disabled = false; }
      });
    }).catch(()=>showErr('Failed to load Firebase.'));
  }
</script>
